import React, { useState, useEffect } from \'react\';\nimport { sendToAppsScript, fetchMetalRates } from \'../utils/api\';\n\nfunction LtvCalculator() {\n  const [goldWt, setGoldWt] = useState(\'\');\n  const [goldPurity, setGoldPurity] = useState(\'\');\n  const [silverWt, setSilverWt] = useState(\'\');\n  const [silverPurity, setSilverPurity] = useState(\'\');\n  const [disbursed, setDisbursed] = useState(\'\');\n  const [goldRate, setGoldRate] = useState(0);\n  const [silverRate, setSilverRate] = useState(0);\n  const [ltv, setLtv] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch metal rates on component mount\n  useEffect(() => {\n    const getMetalRates = async () => {\n      try {\n        // TODO: Implement fetchMetalRates in api.js with actual Google Sheets API call\n        // const rates = await fetchMetalRates();\n        // setGoldRate(rates.gold);\n        // setSilverRate(rates.silver);\n        console.log(\'Fetching metal rates...\'); // Placeholder\n        setGoldRate(5000); // Placeholder rate\n        setSilverRate(70); // Placeholder rate\n      } catch (error) {\n        console.error(\'Error fetching metal rates:\', error);\n        setError(\'Could not fetch metal rates. LTV calculation may be inaccurate.\');\n      }\n    };\n    getMetalRates();\n  }, []);\n\n  useEffect(() => {\n    // Calculate LTV when inputs or rates change\n    const calculateLTV = () => {\n      const gw = parseFloat(goldWt);\n      const gp = parseFloat(goldPurity);\n      const sw = parseFloat(silverWt);\n      const sp = parseFloat(silverPurity);\n      const dis = parseFloat(disbursed);\n\n      if (!isNaN(gw) && !isNaN(gp) && !isNaN(sw) && !isNaN(sp) && !isNaN(dis) && goldRate > 0 && silverRate > 0) {\n        const calculatedLtv = dis / (\n          gw * (gp / 100) * goldRate +\n          sw * (sp / 100) * silverRate\n        );\n        setLtv(calculatedLtv * 100); // Convert to percentage\n      } else {\n        setLtv(null);\n      }\n    };\n\n    calculateLTV();\n  }, [goldWt, goldPurity, silverWt, silverPurity, disbursed, goldRate, silverRate]);\n\n  const getLtvColor = () => {\n    if (ltv === null) return \'\';\n    if (ltv <= 50) return \'text-green-600\';\n    if (ltv > 50 && ltv <= 80) return \'text-lime-600\'; // Using lime for light-green approximation\n    if (ltv > 80 && ltv <= 85) return \'text-amber-600\';\n    if (ltv > 85 && ltv < 95) return \'text-red-600\';\n    if (ltv >= 95) return \'text-gray-500\'; // Indicate locked state\n    return \'\';\n  };\n\n  const isSaveDisabled = ltv !== null && ltv >= 95;\n\n  const handleSave = async () => {\n    if (isSaveDisabled) return;\n    setError(null); // Clear previous errors\n\n    try {\n      const position = await new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, { enableHighAccuracy: false, timeout: 8000 });\n      });\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n\n      const valarUser = JSON.parse(localStorage.getItem(\'valarUser\'));\n      const userId = valarUser ? valarUser.phone : \'unknown\';\n\n      const loanEvent = {\n        userId,\n        lat,\n        lon,\n        ltv: ltv !== null ? ltv.toFixed(2) : null,\n        ts: Date.now(),\n        goldWt: parseFloat(goldWt) || 0,\n        goldPurity: parseFloat(goldPurity) || 0,\n        silverWt: parseFloat(silverWt) || 0,\n        silverPurity: parseFloat(silverPurity) || 0,\n        disbursed: parseFloat(disbursed) || 0,\n      };\n\n      // sendToAppsScript has built-in queueOffline fallback\n      await sendToAppsScript(loanEvent, \'loanEvent\'); // Assuming \'loanEvent\' endpoint\n\n      console.log(\'Loan event saved:\', loanEvent);\n      // TODO: Provide user feedback on successful save (e.g., a success message)\n\n    } catch (error) {\n      console.error(\'Error saving loan event:\', error);\n      setError(\'Failed to save loan event. Please try again.\');\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h2 className=\"text-2xl font-bold mb-4\">LTV Calculator</h2>\n       {error && (\n          <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4\" role=\"alert\">\n            <p>{error}</p>\n          </div>\n        )}\n      <div className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"goldWt\" className=\"block text-sm font-medium text-gray-700\">Gold Wt (g)</label>\n          <input type=\"number\" id=\"goldWt\" step=\"0.001\" value={goldWt} onChange={(e) => setGoldWt(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\" />\n        </div>\n        <div>\n          <label htmlFor=\"goldPurity\" className=\"block text-sm font-medium text-gray-700\">Gold Purity (%)</label>\n          <input type=\"number\" id=\"goldPurity\" step=\"0.01\" value={goldPurity} onChange={(e) => setGoldPurity(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\" />\n        </div>\n        <div>\n          <label htmlFor=\"silverWt\" className=\"block text-sm font-medium text-gray-700\">Silver Wt (g)</label>\n          <input type=\"number\" id=\"silverWt\" step=\"0.001\" value={silverWt} onChange={(e) => setSilverWt(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\" />\n        </div>\n        <div>\n          <label htmlFor=\"silverPurity\" className=\"block text-sm font-medium text-gray-700\">Silver Purity (%)</label>\n          <input type=\"number\" id=\"silverPurity\" step=\"0.01\" value={silverPurity} onChange={(e) => setSilverPurity(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\" />\n        </div>\n        <div>\n          <label htmlFor=\"disbursed\" className=\"block text-sm font-medium text-gray-700\">Disbursed â‚¹</label>\n          <input type=\"number\" id=\"disbursed\" value={disbursed} onChange={(e) => setDisbursed(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\" />\n        </div>\n\n        {ltv !== null && (\n          <div className={\`text-xl font-bold ${getLtvColor()}\`}>\n            LTV: {ltv.toFixed(2)} %\n          </div>\n        )}\n\n        <div>\n          <button\n            onClick={handleSave}\n            disabled={isSaveDisabled}\n            className={\`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${isSaveDisabled ? \'bg-gray-400\' : \'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\'}\`}\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LtvCalculator;\n