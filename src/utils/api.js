import { queueOffline } from \'./offlineQueue\';\n\nconst APPS_SCRIPT_URL = \'https://script.google.com/macros/s/AKfycbx12345/exec\'; // TODO: Replace with your actual Apps Script URL\n\nexport const sendToAppsScript = async (data, endpoint) => {\n  const url = \`\${APPS_SCRIPT_URL}\${endpoint ? \`?action=\${endpoint}\` : \'\'}\`;\n  console.log(\`Attempting to send data to \${url}:\`, data);\n\n  try {\n    const response = await fetch(url, {\n      method: \'POST\',\n      headers: {\n        \'Content-Type\': \'application/json\',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      throw new Error(\`HTTP error! status: \${response.status}\`);\n    }\n\n    console.log(\`Successfully sent data to \${url}\`);\n    return await response.json();\n  } catch (error) {\n    console.error(\`Error sending data to \${url}:\`, error);\n    // Queue offline on failure\n    await queueOffline({ url, method: \'POST\', body: JSON.stringify(data) });\n    throw error; // Re-throw the error so the calling component can handle it\n  }\n};\n\n// TODO: Implement function to fetch metal rates with error handling and potential caching\nexport const fetchMetalRates = async () => {\n  console.log(\'Fetching metal rates...\');\n  // Placeholder implementation\n  return new Promise(resolve => setTimeout(() => resolve({ gold: 5000, silver: 70 }), 1000));\n};\n