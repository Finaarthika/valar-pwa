import { get, set, del, keys } from \'idb-keyval\';\n\nconst QUEUE_STORE = \'offline-queue\';\n\nexport const queueOffline = async (request) => {\n  const timestamp = Date.now();\n  const key = \`\${QUEUE_STORE}-\${timestamp}\`;\n  console.log(\`Queueing request offline with key: \${key}\`, request);\n  await set(key, request);\n};\n\nexport const flushOfflineQueue = async () => {\n  console.log(\'Attempting to flush offline queue\');\n  const allKeys = await keys();\n  const queueKeys = allKeys.filter(key => key.startsWith(QUEUE_STORE));\n\n  for (const key of queueKeys) {\n    const request = await get(key);\n    if (request) {\n      console.log(\`Attempting to replay queued request: \${key}\`, request);\n      try {\n        const response = await fetch(request.url, {\n          method: request.method,\n          headers: request.headers || {},\n          body: request.body,\n        });\n\n        if (response.ok) {\n          console.log(\`Successfully replayed queued request: \${key}\`);\n          await del(key);\n        } else {\n          console.error(\`Failed to replay queued request \${key}: HTTP status \${response.status}\`);\n          // TODO: Implement retry logic or dead-letter queue if needed\n        }\n      } catch (error) {\n        console.error(\`Error replaying queued request \${key}:\`, error);\n        // Keep the request in the queue to retry later\n      }\n    }\n  }\n};\n\n// Listen for the \'online\' event to attempt flushing the queue\nwindow.addEventListener(\'online\', flushOfflineQueue);\n\n// Attempt to flush the queue when the service worker is activated (optional, but good for initial load)\n// Note: This might be better handled within the service worker itself for background sync\n// if (\'serviceWorker\' in navigator) {\n//   navigator.serviceWorker.ready.then(registration => {\n//     // You can send a message to the service worker here to trigger a sync\n//     // Or, if using BackgroundSync API directly in the SW, it will handle retries.\n//     // For this idb-keyval approach in the main thread, the \'online\' listener is key.\n//   });\n// }\n\n// Initial flush attempt on load\nflushOfflineQueue();\n